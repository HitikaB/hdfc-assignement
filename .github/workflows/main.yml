name: Deploy to Amazon ECS

# Enable manual trigger
on:
  workflow_dispatch: # Manual trigger event
    inputs:
      environment:
        description: "Environment to deploy (e.g., dev, prod)"
        required: true
        default: "development"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: hdfc-test-frontend
  ECS_SERVICE: hdfc-test-frontend-service
  ECS_CLUSTER: hdfc-test-frontend-cluster
  APP_DEPLOY_NAME: AppECS-hdfc-test-frontend-cluster-hdfc-test-frontend-service
  CODE_DEPLOY_NAME: DgpECS-hdfc-test-frontend-cluster-hdfc-test-frontend-service

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Run SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image to ECR
        id: build-image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment

      - name: Notify Success
        if: success()
        run: echo "Deployment successful!"

      - name: Notify Failure
        if: failure()
        run: echo "Deployment failed. Check logs."
